var searchIndex = new Map(JSON.parse('[\
["mock_builder",{"doc":"<code>mock-builder</code> allows you to create <em>mock pallets</em>. A <em>mock </em>…","t":"ESHQQCHQQCFPGPPNNNNNNNNNNNNNNNNNNNNNNNNNNNNNIPGPNNNHNNNNHNNNNOO","n":["CallId","MOCK_FN_PREFIX","execute","execute_call","execute_call_instance","location","register","register_call","register_call_instance","storage","FunctionLocation","No","TraitInfo","Whatever","Yes","append_type_signature","assimilate_trait_prefix","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","fmt","fmt","from","from","from","get","into","into","normalize","strip_name_prefix","to_owned","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","CallId","CallNotFound","Error","TypeNotMatch","borrow","borrow_mut","eq","execute_call","fmt","fmt","from","into","register_call","to_string","try_from","try_into","type_id","expected","found"],"q":[[0,"mock_builder"],[10,"mock_builder::location"],[44,"mock_builder::storage"],[61,"mock_builder::storage::Error"],[63,"core::ops::function"],[64,"alloc::string"],[65,"core::option"],[66,"core::fmt"],[67,"core::fmt"],[68,"core::any"]],"d":["","Prefix that the register functions should have.","Execute a function from the function storage. This …","Execute a function from the function storage. Same as …","Execute a function from the function storage for a pallet …","Provide functions for handle fuction locations","Register a mock function into the mock function storage. …","Register a mock function into the mock function storage. …","Register a mock function into the mock function storage …","Provide functions for register/execute calls This module …","Absolute string identification of function.","Create hash with no trait info","Indicate how to perform the localtion hash See …","Create the hash with the trait info if it has trait info …","Create hash with trait info, panics if it has not.","Add a representation of the function input and output types","Remove the trait name from the function name and add such …","","","","","","","","","","","","Returns the argument unchanged.","Creates a location for the function which created the …","Returns the argument unchanged.","Generate a hash of the location","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Normalize the location, allowing to identify the function …","Remove the prefix from the function name.","","","","","","","","","Identify a call in the call storage","","","","","","","Execute a call from the call storage identified by a …","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Register a call into the call storage. The registered call …","","","","","",""],"i":[0,0,0,0,0,0,0,0,0,0,0,8,0,8,8,7,7,8,7,8,7,8,7,8,7,7,8,7,8,7,7,7,8,7,7,7,8,7,8,7,8,7,8,7,0,15,0,15,15,15,15,0,15,15,15,15,0,15,15,15,15,16,16],"f":"``{{ceg}ib{}{{b{d}{{f{{j{h}}}}}}}{}}```{{cik}lb{}{}{{b{e}{{f{g}}}}}{{b{dh}}}}````````{nn}0{ce{}{}}000{A`A`}2{{ce}l{}{}}0{{nn}Ab}{{A`Ad}Af}{{nAd}Af}{cc{}}{cnb}1{{nA`}d}889{{nAh}n}99{c{{Aj{e}}}{}{}}000{cAl{}}0````;;{{AnAn}Ab}{{hc}{{Aj{eAn}}}{}{}}{{AnAd}Af}08>{gh{}{}{{b{c}{{f{e}}}}}}{cd{}}665``","c":[],"p":[[10,"Fn",63],[5,"String",64],[17,"Output"],[8,"CallId",44],[6,"Option",65],[1,"unit"],[5,"FunctionLocation",10],[6,"TraitInfo",10],[1,"bool"],[5,"Formatter",66],[8,"Result",66],[1,"str"],[6,"Result",67],[5,"TypeId",68],[6,"Error",44],[15,"TypeNotMatch",61]],"b":[[52,"impl-Display-for-Error"],[53,"impl-Debug-for-Error"]]}],\
["pallet_remarks",{"doc":"","t":"FIKKNNNNNNNNNNCMNMNMNNNNNNGKGGRIPFPRRRRRNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNCNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNPNNNNCNNNNNNNNNNNNNNEEENNNNNNNNNNNNNNNNNNNNNNNNNNNNNNOOOOH","n":["NoopRemarkDispatchHandler","RemarkArgs","RemarkDispatchHandler","WeightInfo","borrow","borrow_mut","from","from_mut","from_mut","from_ref","from_ref","into","into_mut","into_ref","pallet","post_dispatch_check","post_dispatch_check","pre_dispatch_check","pre_dispatch_check","remark","try_from","try_into","type_id","unchecked_into","unique_saturated_into","vzip","Call","Config","Error","Event","MaxRemarksPerCall","Module","NoRemarks","Pallet","Remark","Remark","RemarkDispatchHandler","RuntimeCall","RuntimeEvent","WeightInfo","__clone_box","__clone_box","__clone_box","before_all_runtime_migrations","blake2_128","blake2_128","blake2_128","blake2_128_concat","blake2_128_concat","blake2_128_concat","blake2_256","blake2_256","blake2_256","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","count","crate_version","current_storage_version","decode","decode","decode","decode_all","decode_all","decode_all","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_all_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","decode_with_depth_limit","dispatch_bypass_filter","dispatchables","encode_to","encode_to","encode_to","eq","eq","eq","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","equivalent","fmt","fmt","fmt","fmt","from","from","from","from","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_mut","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","from_ref","get_call_index","get_call_indices","get_call_name","get_call_names","get_dispatch_info","identity","identity","identity","index","infos","integrity_test","into","into","into","into","into_mut","into_mut","into_mut","into_mut","into_ref","into_ref","into_ref","into_ref","is_feeless","module_name","name","name_hash","new_call_variant_remark","offchain_worker","on_chain_storage_version","on_finalize","on_genesis","on_idle","on_initialize","on_runtime_upgrade","remark","remark","size_hint","size_hint","size_hint","storage_info","storage_types","to_keyed_vec","to_keyed_vec","to_keyed_vec","to_owned","to_owned","to_owned","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","tt_default_parts","tt_error_token","tt_extra_parts","twox_128","twox_128","twox_128","twox_256","twox_256","twox_256","twox_64_concat","twox_64_concat","twox_64_concat","type_id","type_id","type_id","type_id","type_info","type_info","type_info","unchecked_into","unchecked_into","unchecked_into","unchecked_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","unique_saturated_into","vzip","vzip","vzip","vzip","whitelisted_storage_keys","with_weight","call","remarks","call","remarks","remark"],"q":[[0,"pallet_remarks"],[26,"pallet_remarks::pallet"],[212,"pallet_remarks::pallet::Call"],[214,"pallet_remarks::pallet::Event"],[216,"pallet_remarks::pallet::dispatchables"],[217,"frame_support::dispatch"],[218,"sp_weights::weight_v2"],[219,"core::result"],[220,"core::any"],[221,"dyn_clone::sealed"],[222,"alloc::vec"],[223,"frame_support::traits::metadata"],[224,"parity_scale_codec::error"],[225,"parity_scale_codec::codec"],[226,"frame_support::dispatch"],[227,"core::fmt"],[228,"core::fmt"],[229,"alloc::boxed"],[230,"frame_system::pallet_prelude"],[231,"frame_support::traits::metadata"],[232,"scale_info::ty"],[233,"sp_storage"],[234,"frame_support::dispatch"]],"d":["","The type used in the RemarkDispatchHandler trait of the …","The handler used to check remarks before and after call …","","","","Returns the argument unchanged.","Get a mutable reference to the inner from the outer.","","Get a reference to the inner from the outer.","","Calls <code>U::from(self)</code>.","","","The <code>pallet</code> module in each FRAME pallet hosts the most …","","","","","","","","","","","","Contains a variant per dispatchable extrinsic that this …","Configuration trait of this pallet.","The <code>Error</code> enum of this pallet.","The <code>Event</code> enum of this pallet","Type that restrains the maximum remarks that can be …","Type alias to <code>Pallet</code>, to be used by <code>construct_runtime</code>.","No remarks were provided.","The <code>Pallet</code> struct, the main type that implements traits …","A remark was made.","The type attached to the remark event.","The handler used to check remarks before and after call …","The overarching call type.","","Weight information.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Auto-generated docs-only module listing all defined …","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","","Get a mutable reference to the inner from the outer.","Get a mutable reference to the inner from the outer.","","","Get a reference to the inner from the outer.","","Get a reference to the inner from the outer.","","Get a reference to the inner from the outer.","Get a reference to the inner from the outer.","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","Create a call with the variant <code>remark</code>.","","","","","","","","Add remarks to a call.","See <code>Pallet::remark</code>.","","","","","Auto-generated docs-only module listing all (public and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Add remarks to a call."],"i":[0,0,0,0,41,41,41,41,41,41,41,41,41,41,0,42,41,42,41,43,41,41,41,41,41,41,0,0,0,0,3,0,20,0,14,3,3,3,3,3,13,14,15,13,14,20,15,14,20,15,14,20,15,13,14,20,15,13,14,20,15,13,14,15,13,14,15,13,13,13,14,20,15,14,20,15,14,20,15,14,20,15,15,0,14,20,15,13,14,15,13,13,13,14,14,14,15,15,15,13,14,20,15,13,14,20,15,13,13,14,14,20,20,15,15,13,13,14,14,20,20,15,15,15,15,15,15,15,14,20,15,13,13,13,13,14,20,15,13,14,20,15,13,14,20,15,15,13,13,13,15,13,13,13,13,13,13,13,13,15,14,20,15,13,0,14,20,15,13,14,15,13,14,20,15,13,14,20,15,0,0,0,14,20,15,14,20,15,14,20,15,13,14,20,15,14,20,15,13,14,20,15,13,14,20,15,13,14,20,15,13,20,44,44,45,45,0],"f":"````{ce{}{}}0{cc{}}1010111`{cb{}}{{{d{c}}}bf}10{hj}{c{{l{e}}}{}{}}0{cn{}}666``````````````{{cA`}Ab{}}00{{}j}{c{{Af{Ad}}}{}}00{c{{Ah{Ad}}}{}}00111::::::::{{{Aj{c}}}{{Aj{c}}}{}}{{{Al{c}}}{{Al{c}}}f}{{{An{c}}}{{An{c}}}f}{{ce}Ab{}{}}00{{}B`}{{}Bb}{{}c{}}{c{{l{{Al{e}}Bd}}}Bff}{c{{l{{Bh{e}}Bd}}}Bf{}}{c{{l{{An{e}}Bd}}}Bff}{{{Bj{Ad}}}{{l{cBd}}}{}}00{{h{Bj{Ad}}}{{l{cBd}}}{}}00{{hc}{{l{eBd}}}Bf{}}00{{{An{c}}e}Blf{}}`{{{Al{c}}e}Abf{BnC`}}{{{Bh{c}}e}Ab{}{BnC`}}{{{An{c}}e}Abf{BnC`}}{{{Aj{c}}{Aj{c}}}Cb{}}{{{Al{c}}{Al{c}}}Cbf}{{{An{c}}{An{c}}}Cbf}{{ce}Cb{}{}}00000000{{{Aj{c}}Cd}Cf{}}{{{Al{c}}Cd}Cff}{{{Bh{c}}Cd}Cff}{{{An{c}}Cd}Cff}{cc{}}0000{ce{}{}}01100110101001{{{An{c}}}Adf}{{}{{Bj{Ad}}}}{{{An{c}}}Chf}{{}{{Bj{Ch}}}}{{{An{c}}}Cjf}{c{{Ah{Ad}}}{}}00{{}B`}{{}{{Ah{Cl}}}}{{}Ab}999999999999{{{An{c}}e}Cbf{}}{{}Ch}0{{}{{Af{Ad}}}}{{CnD`}{{An{c}}}f}{{{Db{c}}}Abf}{{}Dd}16{{{Db{c}}j}jf}{{{Db{c}}}jf}{{}j}{{{Df{c}}CnD`}bf}`{{{Al{c}}}B`f}{{{Bh{c}}}B`{}}{{{An{c}}}B`f}{{}{{Ah{Dh}}}}`{{c{Bj{Ad}}}{{Ah{Ad}}}{}}00{ce{}{}}00{c{{l{e}}}{}{}}0000000```{c{{Af{Ad}}}{}}00000{c{{Ah{Ad}}}{}}00{cn{}}000{{}Dj}00555555555555{{}{{Ah{Dl}}}}{{cj}{{E`{Dn}}}{}}````{{CnD`}Ab}","c":[31],"p":[[8,"DispatchResult",217],[8,"RemarkArgs",0],[10,"Config",26],[1,"u32"],[5,"Weight",218],[6,"Result",219],[5,"TypeId",220],[5,"Private",221],[1,"unit"],[1,"u8"],[1,"array"],[5,"Vec",222],[5,"Pallet",26],[6,"Event",26],[6,"Call",26],[1,"usize"],[5,"CrateVersion",223],[5,"Error",224],[10,"Input",225],[6,"Error",26],[1,"slice"],[8,"DispatchResultWithPostInfo",217],[10,"Output",225],[10,"Sized",226],[1,"bool"],[5,"Formatter",227],[8,"Result",227],[1,"str"],[5,"DispatchInfo",217],[5,"PalletInfoData",223],[5,"BoundedVec",228],[5,"Box",229],[8,"BlockNumberFor",230],[5,"StorageVersion",223],[8,"OriginFor",230],[5,"StorageInfo",231],[5,"Type",232],[5,"TrackedStorageKey",233],[5,"PostDispatchInfo",217],[5,"DispatchErrorWithPostInfo",234],[5,"NoopRemarkDispatchHandler",0],[10,"RemarkDispatchHandler",0],[10,"WeightInfo",0],[15,"remark",212],[15,"Remark",214]],"b":[]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
